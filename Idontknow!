local HttpService = game:GetService("HttpService")

local userKey = "YOUR_KEY_HERE"
local serverEndpoint = "https://85a1-2601-647-6512-1bd7-65e8-985-974a-faa2.ngrok-free.app/log_execution"  -- Replace with your server endpoint
local realScriptURL = "https://raw.githubusercontent.com/Estplugs/test/refs/heads/main/lua"

local userHWID = "NO_HWID_FUNCTION"
if gethwid then
    userHWID = gethwid()
end

local executorName = "UnknownExecutor"
if identifyexecutor then
    executorName = identifyexecutor() or "UnknownExecutor"
end

local placeId = game.PlaceId
local jobId = game.JobId or "UnknownJobId"
local placeName = "UnknownPlace"
pcall(function()
    local info = game:GetService("MarketplaceService"):GetProductInfo(placeId)
    placeName = info.Name or "UnknownPlace"
end)

local validateUrl = string.format("http://127.0.0.1:5000/validate_key?key=%s&hwid=%s", userKey, userHWID)

local success, response = pcall(function()
    return http.request({
        Url = validateUrl,
        Method = "GET"
    })
end)

if not success or not response then
    game.Players.LocalPlayer:Kick("Whitelist check failed. No response from server.")
    return
end

if response.StatusCode ~= 200 then
    game.Players.LocalPlayer:Kick("Whitelist check failed: "..(response.Body or "Unknown error"))
    return
end

local data
local decodeOK, decodeErr = pcall(function()
    data = HttpService:JSONDecode(response.Body)
end)
if not decodeOK then
    game.Players.LocalPlayer:Kick("Whitelist check: invalid JSON => "..(decodeErr or "nil"))
    return
end

if not data.valid then
    game.Players.LocalPlayer:Kick("Whitelist check failed => "..(data.reason or "nil"))
    return
end

-- Log execution to the server
local logData = {
    hwid = userHWID,
    executor = executorName,
    key = userKey,
    discord_id = data.discord_id or "Unknown",
    execution_count = data.execution_count or 0,
    job_id = jobId,
    place_id = placeId,
    place_name = placeName
}

local logSuccess, logErr = pcall(function()
    http.request({
        Url = serverEndpoint,
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"},
        Body = HttpService:JSONEncode(logData)
    })
end)

if not logSuccess then
    game.Players.LocalPlayer:Kick("Failed to log execution => "..tostring(logErr))
end

-- Load the real script
local success2, err2 = pcall(function()
    loadstring(game:HttpGet(realScriptURL))()
end)
if not success2 then
    game.Players.LocalPlayer:Kick("Failed to load main script => "..tostring(err2))
end
