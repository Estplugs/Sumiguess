local replicatedStorage = game:GetService("ReplicatedStorage")
local remotesCurrency = replicatedStorage:WaitForChild("Remotes"):WaitForChild("Currency")
local remotesPetCharacter = replicatedStorage:WaitForChild("Remotes"):WaitForChild("PetCharacter")

local pickUpCurrency = remotesCurrency:WaitForChild("PickedUpCurrency")
local pickUpGems = remotesCurrency:WaitForChild("PickedUpGems")
local attackHit = remotesPetCharacter:WaitForChild("AttackHit")

local areas = workspace:WaitForChild("Areas")

local currencyArgs = { 65000 }
local gemsArgs = { 10 }

local petIds = {
    "{c92a8678-55e9-4cc4-8368-772bc2e5d1af}",
    "{e9364949-8f18-4e98-8047-770876348628}",
    "{9678b7e3-5b1b-4f34-9fd2-f645aec605e7}",
    "{7adb74a3-c4d2-4ce9-bfc8-83293a08008f}",
    "{27677922-f454-4347-9dc2-893a294b0c7f}",
    "{24ef7270-cac6-4edc-b785-dc060ca33189}"
}

local function pickUp()
    while true do
        pickUpCurrency:FireServer(unpack(currencyArgs))
        pickUpGems:FireServer(unpack(gemsArgs))
        wait(0.1) -- Adjust the delay as needed
    end
end

local function attackAllSpawners()
    while true do
        for _, area in pairs(areas:GetChildren()) do
            local spawners = area:FindFirstChild("Spawners")
            if spawners then
                for _, spawner in pairs(spawners:GetChildren()) do
                    for _, petId in ipairs(petIds) do
                        local args = { petId, spawner }
                        attackHit:FireServer(unpack(args))
                    end
                end
            end
        end
        wait(5) -- Adjust the delay as needed to prevent excessive requests
    end
end

-- Run both functions in parallel
spawn(pickUp)
spawn(attackAllSpawners)
